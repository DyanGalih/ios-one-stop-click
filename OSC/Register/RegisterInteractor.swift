//
//  RegisterInteractor.swift
//  OSC
//
//  Created by Dyan Galih on 07/05/19.
//  Copyright (c) 2019 Dyan Galih. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Alamofire

protocol RegisterBusinessLogic
{
    func doRegister(request: Register.NewUser.Request)
    
}

protocol RegisterDataStore
{
    var name: String { get set }
    var email: String { get set }
    var password: String { get set }
    var password_confirmation: String { get set }
}

extension Request {
    public func debugLog() -> Self {
        #if DEBUG
        debugPrint(self)
        #endif
        return self
    }
}

class RegisterInteractor: RegisterBusinessLogic, RegisterDataStore
{
    var email: String = ""
    
    var password: String = ""
    
    var name: String = ""
    
    var password_confirmation: String = ""
    
    var presenter: RegisterPresentationLogic?
    var worker: RegisterWorker?
    //var name: String = ""
    
    // MARK: Do something
    
    func doRegister(request: Register.NewUser.Request)
    {
        var errorMessage = ""
        var error = false
        if request.name.isEmpty{
            errorMessage = "Name can't be empty"
            error = true
        } else
            
            if request.email.isEmpty{
                errorMessage = "Email can't be empty"
                error = true
            } else
                
                if request.password.isEmpty{
                    errorMessage = "Pin can't be empty"
                    error = true
                } else
                    
                    if request.password_confirmation.isEmpty{
                        errorMessage = "Pin confirmation can't be empty"
                        error = true
        }
        if(error){
            self.presenter?.presentRegisterFailed(title: "Register Failed", message: errorMessage)
        }else{
            let parameters = [
                "name": request.name,
                "email": request.email,
                "password": request.password,
                "password_confirmation": request.password_confirmation
            ]
            
            Alamofire.request(Config().endpoint + "auth/register", method: .post, parameters: parameters as Parameters, encoding:URLEncoding.default).debugLog().responseJSON{ response in
                do{
                    let registerStruct = try JSONDecoder().decode(Register.NewUser.Response.self, from: response.data!)
                    self.presenter?.presentRegisterSuccess()
                }catch _{
                    self.presenter?.presentRegisterFailed(title: "Register Failed", message: "Please contact your administrator")
                }
            }
        }
    }
}
